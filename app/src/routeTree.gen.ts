/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspaceIndexRouteImport } from './routes/workspace/index'
import { Route as UserIndexRouteImport } from './routes/user/index'
import { Route as ReportIndexRouteImport } from './routes/report/index'
import { Route as GroupIndexRouteImport } from './routes/group/index'
import { Route as DatabaseIndexRouteImport } from './routes/database/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as SettingUserIndexRouteImport } from './routes/setting/user/index'
import { Route as SettingSystemIndexRouteImport } from './routes/setting/system/index'

const WorkspaceIndexRoute = WorkspaceIndexRouteImport.update({
  id: '/workspace/',
  path: '/workspace/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIndexRoute = UserIndexRouteImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportIndexRoute = ReportIndexRouteImport.update({
  id: '/report/',
  path: '/report/',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupIndexRoute = GroupIndexRouteImport.update({
  id: '/group/',
  path: '/group/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseIndexRoute = DatabaseIndexRouteImport.update({
  id: '/database/',
  path: '/database/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingUserIndexRoute = SettingUserIndexRouteImport.update({
  id: '/setting/user/',
  path: '/setting/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingSystemIndexRoute = SettingSystemIndexRouteImport.update({
  id: '/setting/system/',
  path: '/setting/system/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardIndexRoute
  '/database': typeof DatabaseIndexRoute
  '/group': typeof GroupIndexRoute
  '/report': typeof ReportIndexRoute
  '/user': typeof UserIndexRoute
  '/workspace': typeof WorkspaceIndexRoute
  '/setting/system': typeof SettingSystemIndexRoute
  '/setting/user': typeof SettingUserIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof DashboardIndexRoute
  '/database': typeof DatabaseIndexRoute
  '/group': typeof GroupIndexRoute
  '/report': typeof ReportIndexRoute
  '/user': typeof UserIndexRoute
  '/workspace': typeof WorkspaceIndexRoute
  '/setting/system': typeof SettingSystemIndexRoute
  '/setting/user': typeof SettingUserIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard/': typeof DashboardIndexRoute
  '/database/': typeof DatabaseIndexRoute
  '/group/': typeof GroupIndexRoute
  '/report/': typeof ReportIndexRoute
  '/user/': typeof UserIndexRoute
  '/workspace/': typeof WorkspaceIndexRoute
  '/setting/system/': typeof SettingSystemIndexRoute
  '/setting/user/': typeof SettingUserIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/database'
    | '/group'
    | '/report'
    | '/user'
    | '/workspace'
    | '/setting/system'
    | '/setting/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/database'
    | '/group'
    | '/report'
    | '/user'
    | '/workspace'
    | '/setting/system'
    | '/setting/user'
  id:
    | '__root__'
    | '/dashboard/'
    | '/database/'
    | '/group/'
    | '/report/'
    | '/user/'
    | '/workspace/'
    | '/setting/system/'
    | '/setting/user/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DatabaseIndexRoute: typeof DatabaseIndexRoute
  GroupIndexRoute: typeof GroupIndexRoute
  ReportIndexRoute: typeof ReportIndexRoute
  UserIndexRoute: typeof UserIndexRoute
  WorkspaceIndexRoute: typeof WorkspaceIndexRoute
  SettingSystemIndexRoute: typeof SettingSystemIndexRoute
  SettingUserIndexRoute: typeof SettingUserIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspace/': {
      id: '/workspace/'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/report/': {
      id: '/report/'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof ReportIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group/': {
      id: '/group/'
      path: '/group'
      fullPath: '/group'
      preLoaderRoute: typeof GroupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/': {
      id: '/database/'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof DatabaseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setting/user/': {
      id: '/setting/user/'
      path: '/setting/user'
      fullPath: '/setting/user'
      preLoaderRoute: typeof SettingUserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setting/system/': {
      id: '/setting/system/'
      path: '/setting/system'
      fullPath: '/setting/system'
      preLoaderRoute: typeof SettingSystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DatabaseIndexRoute: DatabaseIndexRoute,
  GroupIndexRoute: GroupIndexRoute,
  ReportIndexRoute: ReportIndexRoute,
  UserIndexRoute: UserIndexRoute,
  WorkspaceIndexRoute: WorkspaceIndexRoute,
  SettingSystemIndexRoute: SettingSystemIndexRoute,
  SettingUserIndexRoute: SettingUserIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
