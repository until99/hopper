/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as AppWorkspaceIndexRouteImport } from './routes/app/workspace/index'
import { Route as AppUserIndexRouteImport } from './routes/app/user/index'
import { Route as AppReportIndexRouteImport } from './routes/app/report/index'
import { Route as AppGroupIndexRouteImport } from './routes/app/group/index'
import { Route as AppDatabaseIndexRouteImport } from './routes/app/database/index'
import { Route as AppDashboardIndexRouteImport } from './routes/app/dashboard/index'
import { Route as AppSettingUserIndexRouteImport } from './routes/app/setting/user/index'
import { Route as AppSettingSystemIndexRouteImport } from './routes/app/setting/system/index'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AppWorkspaceIndexRoute = AppWorkspaceIndexRouteImport.update({
  id: '/app/workspace/',
  path: '/app/workspace/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppUserIndexRoute = AppUserIndexRouteImport.update({
  id: '/app/user/',
  path: '/app/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppReportIndexRoute = AppReportIndexRouteImport.update({
  id: '/app/report/',
  path: '/app/report/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppGroupIndexRoute = AppGroupIndexRouteImport.update({
  id: '/app/group/',
  path: '/app/group/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppDatabaseIndexRoute = AppDatabaseIndexRouteImport.update({
  id: '/app/database/',
  path: '/app/database/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/app/dashboard/',
  path: '/app/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSettingUserIndexRoute = AppSettingUserIndexRouteImport.update({
  id: '/app/setting/user/',
  path: '/app/setting/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSettingSystemIndexRoute = AppSettingSystemIndexRouteImport.update({
  id: '/app/setting/system/',
  path: '/app/setting/system/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/signin': typeof SigninRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
  '/app/database': typeof AppDatabaseIndexRoute
  '/app/group': typeof AppGroupIndexRoute
  '/app/report': typeof AppReportIndexRoute
  '/app/user': typeof AppUserIndexRoute
  '/app/workspace': typeof AppWorkspaceIndexRoute
  '/app/setting/system': typeof AppSettingSystemIndexRoute
  '/app/setting/user': typeof AppSettingUserIndexRoute
}
export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/app/dashboard': typeof AppDashboardIndexRoute
  '/app/database': typeof AppDatabaseIndexRoute
  '/app/group': typeof AppGroupIndexRoute
  '/app/report': typeof AppReportIndexRoute
  '/app/user': typeof AppUserIndexRoute
  '/app/workspace': typeof AppWorkspaceIndexRoute
  '/app/setting/system': typeof AppSettingSystemIndexRoute
  '/app/setting/user': typeof AppSettingUserIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/signin': typeof SigninRoute
  '/app/dashboard/': typeof AppDashboardIndexRoute
  '/app/database/': typeof AppDatabaseIndexRoute
  '/app/group/': typeof AppGroupIndexRoute
  '/app/report/': typeof AppReportIndexRoute
  '/app/user/': typeof AppUserIndexRoute
  '/app/workspace/': typeof AppWorkspaceIndexRoute
  '/app/setting/system/': typeof AppSettingSystemIndexRoute
  '/app/setting/user/': typeof AppSettingUserIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signin'
    | '/app/dashboard'
    | '/app/database'
    | '/app/group'
    | '/app/report'
    | '/app/user'
    | '/app/workspace'
    | '/app/setting/system'
    | '/app/setting/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/app/dashboard'
    | '/app/database'
    | '/app/group'
    | '/app/report'
    | '/app/user'
    | '/app/workspace'
    | '/app/setting/system'
    | '/app/setting/user'
  id:
    | '__root__'
    | '/signin'
    | '/app/dashboard/'
    | '/app/database/'
    | '/app/group/'
    | '/app/report/'
    | '/app/user/'
    | '/app/workspace/'
    | '/app/setting/system/'
    | '/app/setting/user/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SigninRoute: typeof SigninRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
  AppDatabaseIndexRoute: typeof AppDatabaseIndexRoute
  AppGroupIndexRoute: typeof AppGroupIndexRoute
  AppReportIndexRoute: typeof AppReportIndexRoute
  AppUserIndexRoute: typeof AppUserIndexRoute
  AppWorkspaceIndexRoute: typeof AppWorkspaceIndexRoute
  AppSettingSystemIndexRoute: typeof AppSettingSystemIndexRoute
  AppSettingUserIndexRoute: typeof AppSettingUserIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/workspace/': {
      id: '/app/workspace/'
      path: '/app/workspace'
      fullPath: '/app/workspace'
      preLoaderRoute: typeof AppWorkspaceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/user/': {
      id: '/app/user/'
      path: '/app/user'
      fullPath: '/app/user'
      preLoaderRoute: typeof AppUserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/report/': {
      id: '/app/report/'
      path: '/app/report'
      fullPath: '/app/report'
      preLoaderRoute: typeof AppReportIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/group/': {
      id: '/app/group/'
      path: '/app/group'
      fullPath: '/app/group'
      preLoaderRoute: typeof AppGroupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/database/': {
      id: '/app/database/'
      path: '/app/database'
      fullPath: '/app/database'
      preLoaderRoute: typeof AppDatabaseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/dashboard/': {
      id: '/app/dashboard/'
      path: '/app/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/setting/user/': {
      id: '/app/setting/user/'
      path: '/app/setting/user'
      fullPath: '/app/setting/user'
      preLoaderRoute: typeof AppSettingUserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/setting/system/': {
      id: '/app/setting/system/'
      path: '/app/setting/system'
      fullPath: '/app/setting/system'
      preLoaderRoute: typeof AppSettingSystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  SigninRoute: SigninRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
  AppDatabaseIndexRoute: AppDatabaseIndexRoute,
  AppGroupIndexRoute: AppGroupIndexRoute,
  AppReportIndexRoute: AppReportIndexRoute,
  AppUserIndexRoute: AppUserIndexRoute,
  AppWorkspaceIndexRoute: AppWorkspaceIndexRoute,
  AppSettingSystemIndexRoute: AppSettingSystemIndexRoute,
  AppSettingUserIndexRoute: AppSettingUserIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
